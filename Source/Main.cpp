/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "../JuceLibraryCode/JuceHeader.h"
#include "MainTabs.h"
#include "AudioPath.h"
#include "HardRock.h"

//==============================================================================
/**
    This is the top-level window that we'll pop up. Inside it, we'll create and
    show a component from the MainComponent.cpp file (you can open this file using
    the Jucer to edit it).
*/
class SoftRockCwWindow  : public DocumentWindow
{
public:
    //==============================================================================
    SoftRockCwWindow()
        : DocumentWindow ("SoftRock CW",
                          Colours::lightgrey,
                          DocumentWindow::allButtons,
                          true)
    {
        // Create an instance of our main content component, and add it to our window..
		mainTabs = new MainTabs();
		setContentOwned (mainTabs, true);

        // Centre the window on the screen
        centreWithSize (getWidth(), getHeight());

        // And show it!
        setVisible (true);
    }

    ~SoftRockCwWindow()
    {
		// (the content component will be deleted automatically, so no need to do it here)
	}

    //==============================================================================
    void closeButtonPressed()
    {
        // When the user presses the close button, we'll tell the app to quit. This
        // SoftRockCwWindow object will be deleted by the JUCESoftRockCwApplication class.
        JUCEApplication::quit();
    }

	void addComponent(const String &tabName, const Colour &tabBackgroundColour, Component *contentComponent)
	{
		mainTabs->addComponent(tabName,tabBackgroundColour,contentComponent);
	}

	RadioPanel* getRadioPanel() {
		Component* cp = mainTabs->getComponent(0);
		return dynamic_cast<RadioPanel*>(cp);
	}

private:
	MainTabs *mainTabs;
};



//==============================================================================
class SoftRockCwApplication  : public JUCEApplication
{
public:
    //==============================================================================
    SoftRockCwApplication()
    {
    }

    ~SoftRockCwApplication()
    {
    }

    //==============================================================================
    void initialise (const String& commandLine)
    {
        mainWindow = new SoftRockCwWindow();
		radioHardware = new HardRock();
        initAudio();
		mainWindow->addComponent("IQ device",Colours::lightgrey, getAudioSelector(0));
		mainWindow->addComponent("AF device",Colours::lightgrey, getAudioSelector(1));
		coreTimer = new CoreTimer(radioHardware, mainWindow->getRadioPanel());
		coreTimer->startTimer(1);
    }

    void shutdown()
    {
        // Do your application's shutdown code here..
		coreTimer->stopTimer();
		delete coreTimer;
		mainWindow = 0;
		deinitAudio();
		delete radioHardware;
    }

    //==============================================================================
    void systemRequestedQuit()
    {
        quit();
    }

    //==============================================================================
    const String getApplicationName()
    {
        return "SoftRockCw";
    }

    const String getApplicationVersion()
    {
        return ProjectInfo::versionString;
    }

    bool moreThanOneInstanceAllowed()
    {
        return true;
    }

    void anotherInstanceStarted (const String& commandLine)
    {
        
    }

private:
    ScopedPointer<SoftRockCwWindow> mainWindow;
	HardRock *radioHardware;
	CoreTimer *coreTimer;
};

//==============================================================================
// This macro generates the main() routine that starts the app.
START_JUCE_APPLICATION(SoftRockCwApplication)
